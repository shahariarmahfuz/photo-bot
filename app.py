import logging
import requests
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackContext

# **Bot Token ржПржмржВ Flask рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ BASE URL**
TOKEN = "7305874644:AAEcpUBhpmmOrv0rE-0xTJsUSxsTmO5qZHw"
BASE_URL = "https://b15638c8-af87-4164-b831-414c185be4c8-00-3o5w0isf9c16d.pike.replit.dev"  # Flask рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ BASE URL
UPLOAD_URL = f"{BASE_URL}/photo"  # Flask API рж▓рж┐ржВржХ

# **рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк**
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# **Start Command**
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржЫржмрж┐ ржкрж╛ржарж╛ржи, ржЖржорж┐ рж╕рзЗржЯрж┐ ржЖржкрж▓рзЛржб ржХрж░ржмред")

# **ржЫржмрж┐ ржЖржкрж▓рзЛржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░**
async def handle_photo(update: Update, context: CallbackContext):
    photo = update.message.photo[-1]  # рж╕рж░рзНржмрзЛржЪрзНржЪ рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржирзЗрж░ ржЫржмрж┐ ржирж┐ржи
    file = await context.bot.get_file(photo.file_id)
    file_path = file.file_path

    # **ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ**
    processing_message = await update.message.reply_text("ЁЯФД ржЫржмрж┐ржЯрж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ...")

    # **ржЫржмрж┐ ржЯрзЗржорзНржк ржлрж╛ржЗрж▓рзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи**
    response = requests.get(file_path)
    if response.status_code == 200:
        files = {"file": ("image.jpg", response.content, "image/jpeg")}
        res = requests.post(UPLOAD_URL, files=files)

        if res.status_code == 200:
            data = res.json()
            final_url = f"{BASE_URL}{data['local_url']}"  # **BASE_URL + /uploads/... ржпрзЛржЧ ржХрж░рж╛**

            # **ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржорзЗрж╕рзЗржЬ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ ржПржмржВ рж▓рж┐ржВржХ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ**
            await processing_message.delete()
            await update.message.reply_text(
                f"тЬЕ ржЖржкрж▓рзЛржб рж╕ржорзНржкржирзНржи!\nЁЯФЧ [рж▓рж┐ржВржХуБпуБУуБбуВЙ]({final_url})", parse_mode="MarkdownV2"
            )
        else:
            # **ржЖржкрж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ**
            await processing_message.delete()
            await update.message.reply_text("тЭМ ржЖржкрж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ, ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
    else:
        # **ржЫржмрж┐ ржбрж╛ржЙржирж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ**
        await processing_message.delete()
        await update.message.reply_text("тЭМ ржЫржмрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐, ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

# **ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи**
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("ЁЯдЦ ржмржЯ ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ...")
    app.run_polling()

if __name__ == "__main__":
    main()
