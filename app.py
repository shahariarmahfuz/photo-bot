import logging
import requests
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackContext, ConversationHandler

TOKEN = "7305874644:AAEcpUBhpmmOrv0rE-0xTJsUSxsTmO5qZHw"
BASE_URL = "https://photo-upload-production-cd8b.up.railway.app"
UPLOAD_URL = f"{BASE_URL}/photo"
API_URL = "https://nekofilx.onrender.com/photo"

# ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶∏
ANIME_NUMBER, IMG_RATIO_2_3, IMG_RATIO_16_9 = range(3)

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)

# Start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶¨‡•§")

# ‡¶õ‡¶¨‡¶ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def handle_photo(update: Update, context: CallbackContext):
    # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    processing_message = await update.message.reply_text("‚ö° ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá...")
    
    try:
        # ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        response = requests.get(file.file_path)
        
        if response.status_code != 200:
            raise Exception("Failed to download image")
        
        # ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶°
        files = {"file": ("image.jpg", response.content, "image/jpeg")}
        res = requests.post(UPLOAD_URL, files=files)
        
        if res.status_code != 200:
            raise Exception("Failed to upload image")
        
        # ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü
        data = res.json()
        final_url = f"{BASE_URL}{data['local_url']}"
        
        # MarkdownV2 ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶§‡ßà‡¶∞‡¶ø (‡¶∏‡ßç‡¶™‡ßá‡¶∂‡¶æ‡¶≤ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶è‡¶∏‡ßç‡¶ï‡ßá‡¶™ ‡¶ï‡¶∞‡¶æ)
        safe_text = (
            "‚úÖ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®\\!\n"  # '!' ‡¶ï‡ßá ‡¶è‡¶∏‡ßç‡¶ï‡ßá‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
            "üîó ‡¶≤‡¶ø‡¶Ç‡¶ï: "
            f"`{final_url}`"  # ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø‡¶ï‡¶∏‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá URL ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
        )
        
        # ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        await update.message.reply_text(
            safe_text,
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        logging.error(f"Error: {e}")
        # ‡¶è‡¶∞‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã (‡¶è‡¶∏‡ßç‡¶ï‡ßá‡¶™ ‡¶ï‡¶∞‡¶æ '!' ‡¶∏‡¶π)
        await update.message.reply_text("‚ùå ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®\\!", parse_mode="MarkdownV2")
        
    finally:
        # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=processing_message.message_id
        )

# ------------------ /add ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ -------------------
async def add_command(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("üìü ‡¶è‡¶®‡¶ø‡¶Æ‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®:")
    return ANIME_NUMBER

async def get_anime_number(update: Update, context: CallbackContext) -> int:
    context.user_data["anime"] = update.message.text
    await update.message.reply_text("üñº 2:3 ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®:")
    return IMG_RATIO_2_3

async def get_img_ratio_2_3(update: Update, context: CallbackContext) -> int:
    context.user_data["img"] = update.message.text
    await update.message.reply_text("üé¨ 16:9 ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®:")
    return IMG_RATIO_16_9

async def get_img_ratio_16_9(update: Update, context: CallbackContext) -> int:
    context.user_data["anime_img"] = update.message.text

    # ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
    anime = context.user_data.get("anime", "").strip()
    img = context.user_data.get("img", "").strip()
    anime_img = context.user_data.get("anime_img", "").strip()

    # API ‡¶ï‡¶≤
    try:
        params = {
            "anime": anime,
            "img": img,
            "anime_img": anime_img,
        }
        response = requests.post(API_URL, params=params)
        response.raise_for_status()
        data = response.json()

        if data.get("status") == "success":
            message = (
                f"‚úÖ *‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!*\n\n"
                f"üîó [‡¶è‡¶®‡¶ø‡¶Æ‡¶ø ‡¶™‡ßá‡¶ú ‡¶´‡¶ü‡ßã]({data['anime_page_photo']})\n"
                f"üì∏ [‡¶á‡¶Æ‡ßá‡¶ú ‡¶≤‡¶ø‡¶Ç‡¶ï]({data['image']})\n"
                f"üìù ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú: `{data['message']}`"
            )
        else:
            message = f"‚ùå *‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:* `{data.get('message', '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø')}`"

    except Exception as e:
        logging.error(f"API Error: {str(e)}")
        message = "‚ö†Ô∏è ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!"

    # ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶∑
    await update.message.reply_text(message, parse_mode="MarkdownV2")
    return ConversationHandler.END

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶®‡¶§‡ßÅ‡¶® /add ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°)
    app.add_handler(
        ConversationHandler(
            entry_points=[CommandHandler("add", add_command)],
            states={
                ANIME_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_anime_number)],
                IMG_RATIO_2_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_img_ratio_2_3)],
                IMG_RATIO_16_9: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_img_ratio_16_9)],
            },
            fallbacks=[],
        )
    )

    print("ü§ñ ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá...")
    app.run_polling()

if __name__ == "__main__":
    main()
